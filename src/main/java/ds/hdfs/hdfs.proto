// option java_package = "ds.hdfs";
// option java_outer_classname = "SOMETHING";

package proto;

option java_outer_classname = "ProtosHDFS";

// Each BlockMetaData contains information such as:
// 1. The Block ID
// 2. The File ID
// 3. Name of File
// 4. Which block of the file it is
// 5. Which repetition it is
// 6. Which Data Node this block is in
// 7. The IP address of said Data Node
// 8. Port Number of said DataNode
message BlockMetaData {
    required string blockId = 1;
    required string fileId = 2;
    required string fileName = 3;
    required int32 blockNumber = 4;
    required int32 ordReplication = 5;
    required string dataNodeId = 6;
    required string ipAddress = 7;
    required int32 portNumber = 8;
}

// Each block contains the metadata of the block as well as its contents

message Block {
    required BlockMetaData blockMeta = 1;
    required string blockContents = 2;
}

// DataNodeInfo only contains list of BlockMetaData it holds
message DataNodeInfo {
    repeated BlockMetaData blockMetas = 4;
}

// The FileMetadata represents basic file informations and contains:
// 1. The name of the file
// 2. The size of the file
// 3. The parent directory of the file
// 4. The blocks the file is partitioned into

message FileMetadata {
    required string fileId = 1;
    required string fileName = 2;
    required int32 fileSize = 3;
    required string parentDirectory = 4;
    repeated Block partitions = 5;
}

// Request made by client to either name node or data node
// Request types 0-2 are for metadata operations meant for the name node
// Request types 3-6 are for non-metadata operations meant for the data node

// To perform any requests from 3-6, first use OPEN request to get remote file handle
// Using this remote handle to do CRUD operations
// Once CRUD operations are done, close file handle

message Request {
    required string requestId = 1;
    enum RequestType {
        OPEN = 0;
        CLOSE = 1;
        LIST = 2;
        READ = 3;
        WRITE = 4;
        UPDATE = 5;
        DELETE = 6;
    }
    required RequestType requestType = 2;
    optional FileMetadata fileMeta = 3;
    optional Block block = 4;
    repeated DataNodeInfo dataNodes = 5;
}

// Each Response contains a Response ID
// Responses are generated after some operation is completed or has failed
// If there is no error, error message should say something along the lines of
// 'Task has been completed successfully' or 'No errors' etc.
// For CRUD operations, dataNodeInfo contains information on the data nodes
// such as ip address, socket that the client should write to

message Pipeline {
    repeated string dataNodeId = 1;
}

message Response {
    required string responseId = 1;
    enum ResponseType {
        SUCCESS = 0;
        FAILURE = 1;
    }
    required ResponseType responseType = 2;
    optional string errorMessage = 3;
    repeated Block block = 4;
    repeated Pipeline pipelines = 5;
}

// Heartbeat is a message sent from the data node to the adfads
// The heartbeat contains the data node identifier and the list of all blocks
// the data node is storing

message Heartbeat{
    required string heartbeatId = 1;
    required int64 timestamp = 2;
    required DataNodeInfo dataNodeInfo = 3;
}


